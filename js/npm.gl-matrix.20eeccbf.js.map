{"version":3,"sources":["webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/vec2.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/common.js"],"names":["create","out","Float32Array","fromMat4","a","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","set","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","Math","sin","c","cos","scale","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","str","frob","hypot","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","abs","max","mul","sub","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","length","squaredLength","negate","inverse","normalize","len","sqrt","dot","cross","lerp","t","ax","ay","random","r","PI","transformMat2","m","transformMat2d","transformMat3","transformMat4","p0","p1","sinC","cosC","angle","x1","y1","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","i","l","az","bx","by","bz","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","p","rotateY","rotateZ","EPSILON","ARRAY_TYPE","Array","RANDOM","arguments"],"mappings":"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","file":"js/npm.gl-matrix.20eeccbf.js","sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};"],"sourceRoot":""}